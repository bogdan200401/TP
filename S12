#Problema 1

#include <stdio.h>
#include <string.h>

void genereazaNumere(int n, int k, int start, char num[], int unuuri) {
    if (unuuri == k) {
        for (int i = start; i < n; i++) {
            num[i] = '0';
        }
        num[n] = '\0';
        printf("%s\n", num);
        return;
    }
    if (start == n) {
        return;
    }
    num[start] = '1';
    genereazaNumere(n, k, start + 1, num, unuuri + 1);
    num[start] = '0';
    genereazaNumere(n, k, start + 1, num, unuuri);
}

int main() {
    int n, k;
    printf("n: ");
    scanf("%d", &n);
    printf("k: ");
    scanf("%d", &k);
    char num[n + 1];
    genereazaNumere(n, k, 0, num, 0);
    return 0;
}


#Problema 2

#include <stdio.h>
#include <stdlib.h>

void genereazaPermutari(int n, int perm[], int folosit[], int idx) {
    if (idx == n) {
        for (int i = 0; i < n / 2; i++) {
            if (perm[i] < perm[i + 1]) {
                return;
            }
        }
        for (int i = n / 2; i < n - 1; i++) {
            if (perm[i] > perm[i + 1]) {
                return;
            }
        }
        for (int i = 0; i < n; i++) {
            printf("%d ", perm[i]);
        }
        printf("\n");
        return;
    }

    for (int i = 1; i <= n; i++) {
        if (!folosit[i]) {
            folosit[i] = 1;
            perm[idx] = i;
            genereazaPermutari(n, perm, folosit, idx + 1);
            folosit[i] = 0;
        }
    }
}

int main() {
    int n;
    printf("n: ");
    scanf("%d", &n);
    int perm[n], folosit[n + 1];
    for (int i = 0; i <= n; i++) {
        folosit[i] = 0;
    }
    genereazaPermutari(n, perm, folosit, 0);
    return 0;
}


#problema3

#include <stdio.h>
#include <string.h>

void afisareNumarMaxim(char num[], int n, int k) {
    int newLen = n - k;
    char rezultat[newLen + 1];
    int idx = 0, start = 0;
    for (int i = 0; i < newLen; i++) {
        char max = '0';
        for (int j = start; j <= k + i; j++) {
            if (num[j] > max) {
                max = num[j];
                start = j + 1;
            }
        }
        rezultat[idx++] = max;
    }
    rezultat[newLen] = '\0';
    printf("%s\n", rezultat);
}

int main() {
    char num[100];
    int k;
    printf("n: ");
    scanf("%s", num);
    printf("k: ");
    scanf("%d", &k);
    int n = strlen(num);
    afisareNumarMaxim(num, n, k);
    return 0;
}

