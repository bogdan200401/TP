#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <math.h>

void err(int condition, const char *format, ...) {
    if (condition) {
        va_list args;
        va_start(args, format);
        vfprintf(stderr, format, args);
        va_end(args);
    }
}

float *allocVec(int n, ...) {
    float *vector = (float *)malloc(n * sizeof(float));
    if (vector == NULL) {
        printf("Alocarea memoriei a esuat.\n");
        exit(1);
    }

    va_list args;
    va_start(args, n);
    for (int i = 0; i < n; i++) {
        vector[i] = va_arg(args, double);
    }
    va_end(args);

    return vector;
}

void absN(int n, ...) {
    va_list args;
    va_start(args, n);
    for (int i = 0; i < n; i++) {
        float *ptr = va_arg(args, float *);
        *ptr = fabs(*ptr);
    }
    va_end(args);
}

int crescator(int n, char tip, ...) {
    va_list args;
    va_start(args, tip);
    
    switch (tip) {
        case 'd': {
            int prev = va_arg(args, int);
            for (int i = 1; i < n; i++) {
                int current = va_arg(args, int);
                if (current <= prev) {
                    va_end(args);
                    return 0;
                }
                prev = current;
            }
            break;
        }
        case 'f': {
            double prev = va_arg(args, double);
            for (int i = 1; i < n; i++) {
                double current = va_arg(args, double);
                if (current <= prev) {
                    va_end(args);
                    return 0;
                }
                prev = current;
            }
            break;
        }
        default:
            va_end(args);
            return -1; 
    }
    
    va_end(args);
    return 1;
}

int main() {
    err(1 <= 0 || 1 > 100, "n invalid: %d\n", 1);
    
    float *vector = allocVec(3, 7.2, -1, 0);
    for (int i = 0; i < 3; i++) {
        printf("%.2f ", vector[i]);
    }
    printf("\n");
    free(vector);
    
    float x = -5.5, y = 3.8;
    absN(2, &x, &y);
    printf("x = %.2f, y = %.2f\n", x, y);
    
    printf("%d\n", crescator(3, 'd', -1, 7, 9));
    
    return 0;
}
