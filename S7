#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *createNode(int data) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Eroare la alocarea de memorie pentru nod.\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(Node **head, int data) {
    Node *newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node *current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void displayList(Node *head) {
    Node *current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Aplicația 7.1
int areListsIdentice(Node *list1, Node *list2) {
    while (list1 != NULL && list2 != NULL) {
        if (list1->data != list2->data) {
            return 0;
        }
        list1 = list1->next;
        list2 = list2->next;
    }
    return (list1 == NULL && list2 == NULL);
}

// Aplicația 7.2
void inverseazaLista(Node **head) {
    Node *prev = NULL;
    Node *current = *head;
    Node *next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}

// Aplicația 7.3
Node *reuniuneListe(Node *list1, Node *list2) {
    Node *reunion = NULL;
    while (list1 != NULL) {
        insertEnd(&reunion, list1->data);
        list1 = list1->next;
    }
    while (list2 != NULL) {
        if (!esteInLista(reunion, list2->data)) {
            insertEnd(&reunion, list2->data);
        }
        list2 = list2->next;
    }
    return reunion;
}

// Aplicația 7.4
void stergeElement(Node **head, int data) {
    Node *temp = *head;
    Node *prev = NULL;
    if (temp != NULL && temp->data == data) {
        *head = temp->next;
        free(temp);
        return;
    }
    while (temp != NULL && temp->data != data) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) {
        return;
    }
    prev->next = temp->next;
    free(temp);
}

// Aplicația 7.5
int suntListeleEgale(Node *list1, Node *list2) {
    int frecventa1[101] = {0};
    int frecventa2[101] = {0};
    while (list1 != NULL) {
        frecventa1[list1->data]++;
        list1 = list1->next;
    }
    while (list2 != NULL) {
        frecventa2[list2->data]++;
        list2 = list2->next;
    }
    for (int i = 0; i <= 100; i++) {
        if (frecventa1[i] != frecventa2[i]) {
            return 0;
        }
    }
    return 1;
}

int main() 
{
    Node *lista1 = NULL;
    Node *lista2 = NULL;

    insertEnd(&lista1, 1);
    insertEnd(&lista1, 7);
    insertEnd(&lista1, 3);
    insertEnd(&lista1, 1);
    insertEnd(&lista1, 3);

    insertEnd(&lista2, 7);
    insertEnd(&lista2, 1);
    insertEnd(&lista2, 3);
    insertEnd(&lista2, 7);

    printf("Listele sunt identice: %d\n", areListsIdentice(lista1, lista2));

    inverseazaLista(&lista1);
    printf("Lista inversata: ");
    displayList(lista1);

    Node *reunion = reuniuneListe(lista1, lista2);
    printf("Reuniunea listelor: ");
    displayList(reunion);

    stergeElement(&reunion, 3);
    printf("Reuniunea listelor dupa stergere: ");
    displayList(reunion);

    printf("Listele sunt egale: %d\n", suntListeleEgale(lista1, lista2));

    return 0;
}
